# -*- coding: utf-8 -*-
import json
import time
from VmAnlysi.service.MongoDB_Help import MongodbHelp
import requests
import logging

logger = logging.getLogger('django')

ERROR_SUCCESS = 200
ERROR_TOKEN_INVAILD = 401


class HttpChannel(object):
    def get_fusion_compute_token(self, address, username, password, version):
        URL = address + '/service/session'
        headers = {'Content-Type': 'application/json',
                   'Accept': 'application/json;version=' + version + ';charset=UTF-8', 'X-Auth-User': username,
                   'X-Auth-Key': password, 'X-Auth-UserType': '0'}
        response = requests.post(URL, headers=headers)
        if response.status_code != ERROR_SUCCESS:
            err = "Get token error Rsp:{0}".format(response)
            logger.error(err)
            raise Exception(
                "Get token status response error.[status_code={0}]".format(response.status_code))
        token = response.headers["X-Auth-Token"]
        return token

    def get_fusion_compute_site(self, address, version, token, mongodb_name):
        URL = address + '/service/sites'
        headers = {'Content-Type': 'application/json',
                   'Accept': 'application/json;version=' + version + ';charset=UTF-8', 'X-Auth-Token': token}
        response = requests.get(URL, headers=headers)
        if response.status_code == ERROR_TOKEN_INVAILD:
            token = self.update_token(mongodb_name)
            headers = {'Content-Type': 'application/json',
                       'Accept': 'application/json;version=' + version + ';charset=UTF-8', 'X-Auth-Token': token}
            response = requests.get(URL, headers=headers)
        if response.status_code == ERROR_SUCCESS:
            obj = json.loads(response.content)
            urn = obj['sites'][0]['urn']
            site = urn.split('urn:sites:')[1]
            return site
        else:
            err = "Get site error Rsp:{0}".format(response)
            logger.error(err)
            raise Exception(
                "Get site status response error.[status_code={0}]".format(response.status_code))

    def get_fusion_compute_all_cluster(self, address, version, token, site, mongodb_name):
        URL = address + '/service/sites/' + site + '/clusters'
        headers = {'Content-Type': 'application/json',
                   'Accept': 'application/json;version=' + version + ';charset=UTF-8', 'X-Auth-Token': token}
        response = requests.get(URL, headers=headers)
        if response.status_code == ERROR_TOKEN_INVAILD:
            token = self.update_token(mongodb_name)
            headers = {'Content-Type': 'application/json',
                       'Accept': 'application/json;version=' + version + ';charset=UTF-8', 'X-Auth-Token': token}
            response = requests.get(URL, headers=headers)
        if response.status_code == ERROR_SUCCESS:
            obj = json.loads(response.content)
            return obj
        else:
            err = "Get all cluster status response error.[site={}:status_code={}:error content={}]".format(mongodb_name,
                                                                                                           response.status_code,
                                                                                                           response.content)
            logger.error(err)
            raise Exception()

    def get_fusion_compute_all_host(self, address, version, token, site, mongodb_name):
        URL = address + '/service/sites/' + site + '/hosts'
        headers = {'Content-Type': 'application/json',
                   'Accept': 'application/json;version=' + version + ';charset=UTF-8', 'X-Auth-Token': token}
        response = requests.get(URL, headers=headers)
        if response.status_code == ERROR_TOKEN_INVAILD:
            token = self.update_token(mongodb_name)
            headers = {'Content-Type': 'application/json',
                       'Accept': 'application/json;version=' + version + ';charset=UTF-8', 'X-Auth-Token': token}
            response = requests.get(URL, headers=headers)
        if response.status_code == ERROR_SUCCESS:
            obj = json.loads(response.content)
            return obj
        else:
            err = "Get all host status response error.[site={}:status_code={}:error content={}]".format(mongodb_name,
                                                                                                        response.status_code,
                                                                                                        response.content)
            logger.error(err)
            raise Exception(err)

    def get_fusion_compute_vm_info(self, address, version, token, site, vmId, mongodb_name):
        URL = address + '/service/sites/' + site + '/vms/' + vmId
        headers = {'Content-Type': 'application/json',
                   'Accept': 'application/json;version=' + version + ';charset=UTF-8', 'X-Auth-Token': token}
        response = requests.get(URL, headers=headers)
        if response.status_code == ERROR_TOKEN_INVAILD:
            token = self.update_token(mongodb_name)
            headers = {'Content-Type': 'application/json',
                       'Accept': 'application/json;version=' + version + ';charset=UTF-8', 'X-Auth-Token': token}
            response = requests.get(URL, headers=headers)

        if response.status_code == ERROR_SUCCESS:
            obj = json.loads(response.content)
            return obj
        else:
            err = "Get all vm status response error.[site={}:status_code={}:error content={}]".format(mongodb_name,
                                                                                                      response.status_code,
                                                                                                      response.content)
            logger.error(err)
            raise Exception(err)

    def get_fusion_compute_all_vm(self, address, version, token, site, limit, offset, mongodb_name):
        URL = address + '/service/sites/' + site + '/vms?isTemplate=false&detail=2&' + 'limit=' + str(
            limit) + '&offset=' + str(offset)
        headers = {'Content-Type': 'application/json',
                   'Accept': 'application/json;version=' + version + ';charset=UTF-8', 'X-Auth-Token': token}
        response = requests.get(URL, headers=headers)
        if response.status_code == ERROR_TOKEN_INVAILD:
            token = self.update_token(mongodb_name)
            headers = {'Content-Type': 'application/json',
                       'Accept': 'application/json;version=' + version + ';charset=UTF-8', 'X-Auth-Token': token}
            response = requests.get(URL, headers=headers)
        if response.status_code == ERROR_SUCCESS:
            obj = json.loads(response.content)
            return obj
        else:
            err = "Get all vm status response error.[site={}:status_code={}:error content={}]".format(mongodb_name,
                                                                                                      response.status_code,
                                                                                                      response.content)
            logger.error(err)
            raise Exception(err)

    def get_fusion_compute_metric(self, address, version, token, site, request_parameters, mongodb_name):
        URL = address + '/service/sites/' + site + '/monitors/objectmetric-realtimedata'
        headers = {'Content-Type': 'application/json',
                   'Accept': 'application/json;version=' + version + ';charset=UTF-8', 'X-Auth-Token': token,
                   'Connection': 'close'}
        response = requests.post(URL, headers=headers, data=request_parameters)
        if response.status_code == ERROR_TOKEN_INVAILD:  # 更新token
            token = self.update_token(mongodb_name)
            # 完了之后在取一下数据
            headers = {'Content-Type': 'application/json',
                       'Accept': 'application/json;version=' + version + ';charset=UTF-8', 'X-Auth-Token': token,
                       'Connection': 'close'}
            response = requests.post(URL, headers=headers, data=request_parameters)
        if response.status_code == ERROR_SUCCESS:
            obj = json.loads(response.content)
            return obj['items']
        else:
            err = "Get VM Metric status response error.[site={}:status_code={}:error content={}]".format(mongodb_name,
                                                                                                         response.status_code,
                                                                                                         response.content)
            logger.error(err)
            raise Exception(err)

    def get_host_count_info_list(self, address, version, token, site, cluster_urn, mongodb_name):
        URL = address + '/service/sites/' + site + '/hosts/statistics?scope=' + cluster_urn
        headers = {'Content-Type': 'application/json',
                   'Accept': 'application/json;version=' + version + ';charset=UTF-8', 'X-Auth-Token': token}
        response = requests.get(URL, headers=headers)
        if response.status_code == ERROR_TOKEN_INVAILD:
            token = self.update_token(mongodb_name)
            headers = {'Content-Type': 'application/json',
                       'Accept': 'application/json;version=' + version + ';charset=UTF-8', 'X-Auth-Token': token}

            response = requests.get(URL, headers=headers)
        if response.status_code == ERROR_SUCCESS:
            obj = json.loads(response.content)
            return obj
        else:
            err = "Get host count info error,[site={}:status_code={}:error content={}]".format(mongodb_name,
                                                                                               response.status_code,
                                                                                               response.content)
            logger.error(err)
            raise Exception(err)

    def get_alarms_info_list(self, address, version, token, site, data, mongodb_name):
        URL = address + '/service/sites/' + site + '/alarms/historyAlarms'
        headers = {'Content-Type': 'application/json',
                   'Accept': 'application/json;version=' + version + ';charset=UTF-8', 'X-Auth-Token': token}
        response = requests.post(URL, headers=headers, data=data)
        if response.status_code == ERROR_TOKEN_INVAILD:
            token = self.update_token(mongodb_name)
            headers = {'Content-Type': 'application/json',
                       'Accept': 'application/json;version=' + version + ';charset=UTF-8', 'X-Auth-Token': token}
            response = requests.post(URL, headers=headers, data=data)
        if response.status_code != ERROR_SUCCESS:
            err = "Get get alarms info list error,[site={}:status_code={}:error content={}]".format(mongodb_name,
                                                                                               response.status_code,
                                                                                               response.content)
            logger.error(err)
            raise Exception(
                "Get get alarms info list status response error.[status_code={0}]".format(response.status_code))
        obj = json.loads(response.text)
        return obj

    def update_token(self, mongodb_name):
        mongodb = MongodbHelp()
        mongodb.use_db(mongodb_name)
        mongodb.use_collect("FC")
        FC = mongodb.query_all_no_filter()
        array = list(FC)[0]
        username = array['username']
        password = array['password']
        version = array['version']
        address = array['address']
        vrmIP = array['vrmIP']
        httpChannel = HttpChannel()
        token = httpChannel.get_fusion_compute_token(address, username, password, version)
        mongodb.update_fc_info(vrmIP, token, password)
        return token
