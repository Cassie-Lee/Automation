运行程序：

如果你在IDLE 的文件编辑器中打开了一个程序，运行它很简单，按F5 或选择Run►Run Module 菜单项。这是在编程时运行程序的最简单方法，但打开IDLE 
来运行已完成的程序可能有点累。执行Python 脚本还有更方便的方法。

所有Python 程序的第一行应该是#!行，它告诉计算机你想让Python 来执行这个程序。该行以#!开始，但剩下的内容取决于操作系统。
在Windows 上，第一行是 #! python3。
 在OS X，第一行是 #! /usr/bin/env python3。
 在Linux 上，第一行是 #! /usr/bin/python3。

没有#!行，你也能从IDLE 运行Python 脚本，但从命令行运行它们就需要这一行。

在Windows 上运行Python 程序

在Windows 上，Python3.4 的解释程序位于C:\Python34\python.exe。或者，方便的py.exe 程序将读取.py 文件源代码顶部的#!行，并针对该脚本运行相应的
Python版本。如果计算机上安装了多个版本的Python，py.exe 程序确保运行正确版本的Python 程序。
为了方便运行你的Python 程序，可以创建一个.BAT 批处理文件，用py.exe 来运行Python 程序。要创建一个批处理文件，就创建一个新的文本文件，包含一行内
容，类似下面这样：
@py.exe C:\path\to\your\pythonScript.py %*
用你自己的程序的绝对路径替换该路径，将这个文件以.bat 文件扩展名保存（例如，pythonScript.bat）。这个处理文件将使你不必在每次运行时，
都输入Python 程序完整的绝对路径。我建议将所有的批处理文件和.py 文件放在一个文件夹中，如
C:\MyPythonScripts 或C:\Users\YourName\PythonScripts。

在Windows 上，C:\MyPythonScripts 文件夹应该添加到系统路径中，这样就可以从Run 对话框中运行其中的批处理文件。要做到这一点，请修改PATH 环境变量单击
“开始”按钮，并输入“Edit environment variables for your account（编辑账户的环境变量）”。在你开始输入时，该选项应自动完成。

从系统变量中，选择Path 变量，然后单击“编辑”。在“变量值”文本字段中，追加一个分号，键入C:\MyPythonScripts，然后单击“确定”。现在你只需按下Win-R
并输入脚本的名称，就能运行C:\MyPythonScripts 文件夹中的Python 脚本。例如，运行pythonScript，将运行pythonScript.bat，这使你不必从Run 对话框
运行整个命令py.exe C:\MyPythonScripts\pythonScript.py。

在OS X 和Linux 上运行Python 程序

在OS X 上，选择Applications►Utilities►Terminal 将弹出一个终端窗口。终端窗口让你用纯文本在计算机上输入命令，而不是通过图形界面点击。
要在Ubuntu Linux 上打开终端窗口，就按Win（或Super）键，调出Dash 并输入Terminal。
终端窗口将从你的用户账户的主文件夹开始。如果我的用户名是sweigart，OS X上主文件夹在/Users/asweigart，Linux 上在/home/asweigart。
波浪纯字符（~）是主文件夹的快捷方式，所以你可以输入cd ~切换到主文件夹。也可以使用cd 命令，将当前工作目录改变到任何其他目录。在OS X 和Linux 上，
pwd 命令将打印当前工作目录。为了运行Python 程序，将你的.py 文件保存到你的主文件夹。然后，更改.py 文件的权限，运行chmod +x pythonScript.py，
使之成为可执行文件。文件权限超出了本书的范围，但如果你想在终端窗口运行程序，就需要对Python 文件运行此命令。这样做之后，当你打开一个终端窗口，
输入./pythonScript.py，就能运行该脚本。脚本顶部的#!行会告诉操作系统，在哪里可以找到Python 解释器。

运行Python 程序时禁用断言

你可以禁用Python 程序中的assert 语句，从而稍稍提高性能。从终端窗口运行Python 时，在python 或python3 之后和.py 文件之前加上-O 开关。这将运行
程序的优化版本，跳过断言检查。


安装第三方模块：

pip 工具需要在命令行中运行：向它传入install 命令，跟上想要安装的模块名称。例如，在Windows 上，会输入pip install ModuleName，其中ModuleName
是模块的名称。在OS X 和Linux，必须加sudo 前缀来运行pip3，授予管理权限来安装该模块。需要输入sudo pip3 install ModuleName。
如果你已经安装了模块，但想升级到PyPI 上提供的最新版本，就运行pip install –U ModuleName（或在OS X 和Linux 上运行pip3 install –U ModuleName）。
安装模块后，可以在交互式环境中运行import ModuleName，测试安装是否成功。如果未显示错误信息，就可以认为该模块已经成功安装。
运行下面列出的命令，你可以安装本书中介绍的所有模块（请记住，如果在OSX 或Linux 上，用pip3 替代pip）。
• pip install send2trash
• pip install requests
• pip install beautifulsoup4
• pip install selenium
• pip install openpyxl
• pip install PyPDF2
• pip install python-docx（安装python-docx，而不是docx）
• pip install imapclient
• pip install pyzmail
• pip install twilio
• pip install pillow
• pip install pyobjc-core（仅在OS X 上）
• pip install pyobjc（仅在OS X 上）
• pip install python3-xlib（仅在Linux 上）
• pip install pyautogui
对于OS X 用户：pyobjc 模块需要20 分钟或更长的时间来安装，因此，如果它需要一段时间，不要惊慌。也应该先安装pyobjc 核心模块，这将减少整体安装时间。

